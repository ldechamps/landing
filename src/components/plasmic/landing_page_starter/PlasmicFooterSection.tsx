// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9yKGoJuPhuASzRyvAzmezj
// Component: AQ-CadsKWzf6

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Logo from "../../Logo"; // plasmic-import: jPNsII68cxmn/component
import Button from "../../Button"; // plasmic-import: SDaCoeduWJgg/component

import { useScreenVariants as useScreenVariantstyT3UZneAkw } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: TyT3u_zneAkw/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_landing_page_starter.module.css"; // plasmic-import: 9yKGoJuPhuASzRyvAzmezj/projectcss
import sty from "./PlasmicFooterSection.module.css"; // plasmic-import: AQ-CadsKWzf6/css

import TwitterIcon from "./icons/PlasmicIcon__Twitter"; // plasmic-import: Onr-GIAG7zxA/icon
import GithubIcon from "./icons/PlasmicIcon__Github"; // plasmic-import: R2Ch2VXmGIgF/icon
import LinkedinIcon from "./icons/PlasmicIcon__Linkedin"; // plasmic-import: WvVby7mkTw7e/icon
import AppleIcon from "./icons/PlasmicIcon__Apple"; // plasmic-import: MC95sizZ-iB7/icon

createPlasmicElementProxy;

export type PlasmicFooterSection__VariantMembers = {};
export type PlasmicFooterSection__VariantsArgs = {};
type VariantPropType = keyof PlasmicFooterSection__VariantsArgs;
export const PlasmicFooterSection__VariantProps = new Array<VariantPropType>();

export type PlasmicFooterSection__ArgsType = {};
type ArgPropType = keyof PlasmicFooterSection__ArgsType;
export const PlasmicFooterSection__ArgProps = new Array<ArgPropType>();

export type PlasmicFooterSection__OverridesType = {
  root?: p.Flex<"div">;
  logo?: p.Flex<typeof Logo>;
};

export interface DefaultFooterSectionProps {
  className?: string;
}

const $$ = {};

function PlasmicFooterSection__RenderFunc(props: {
  variants: PlasmicFooterSection__VariantsArgs;
  args: PlasmicFooterSection__ArgsType;
  overrides: PlasmicFooterSection__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantstyT3UZneAkw()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__esU6X)}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__joWkh)}
        >
          <Logo
            data-plasmic-name={"logo"}
            data-plasmic-override={overrides.logo}
            _50Opaque={true}
          />

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__glQVj)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__dS3Vp
              )}
            >
              {"Connect with us"}
            </div>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__fWSxy)}
            >
              <TwitterIcon
                className={classNames(projectcss.all, sty.svg__uyOai)}
                role={"img"}
              />

              <GithubIcon
                className={classNames(projectcss.all, sty.svg__j9MUk)}
                role={"img"}
              />

              <LinkedinIcon
                className={classNames(projectcss.all, sty.svg__kpxQp)}
                role={"img"}
              />
            </p.Stack>
          </p.Stack>
        </p.Stack>
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__yxPhm)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__ioi5M
            )}
          >
            {"Product"}
          </div>
          <Button
            className={classNames("__wab_instance", sty.button__odL65)}
            color={"navLink"}
            flat={true}
            submitsForm={true}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__wKZs
              )}
            >
              {"Pricing"}
            </div>
          </Button>
          <Button
            className={classNames("__wab_instance", sty.button___1EUji)}
            color={"navLink"}
            flat={true}
            submitsForm={true}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__joQ
              )}
            >
              {"Log in"}
            </div>
          </Button>
          <Button
            className={classNames("__wab_instance", sty.button__q7PI)}
            color={"navLink"}
            flat={true}
            submitsForm={true}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__uuqdI
              )}
            >
              {"Integrations"}
            </div>
          </Button>
          <Button
            className={classNames("__wab_instance", sty.button__aoI5F)}
            color={"navLink"}
            flat={true}
            submitsForm={true}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__eyPty
              )}
            >
              {"Insights"}
            </div>
          </Button>
        </p.Stack>
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__v4KYp)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__zTese
            )}
          >
            {"Support"}
          </div>
          <Button
            className={classNames("__wab_instance", sty.button__joSqF)}
            color={"navLink"}
            flat={true}
            submitsForm={true}
          >
            {"Documentation"}
          </Button>
          <Button
            className={classNames("__wab_instance", sty.button__ksaAp)}
            color={"navLink"}
            flat={true}
            submitsForm={true}
          >
            {"FAQs"}
          </Button>
          <Button
            className={classNames("__wab_instance", sty.button___3Dhx)}
            color={"navLink"}
            flat={true}
            submitsForm={true}
          >
            {"Status"}
          </Button>
        </p.Stack>
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__kNtx0)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__fkyzX
            )}
          >
            {"Company"}
          </div>
          <Button
            className={classNames("__wab_instance", sty.button__ew5Eg)}
            color={"navLink"}
            flat={true}
            submitsForm={true}
          >
            {"About"}
          </Button>
          <Button
            className={classNames("__wab_instance", sty.button__x93Dh)}
            color={"navLink"}
            flat={true}
            submitsForm={true}
          >
            {"Contact us"}
          </Button>
          <Button
            className={classNames("__wab_instance", sty.button___3AJs2)}
            color={"navLink"}
            flat={true}
            submitsForm={true}
          >
            {"Careers"}
          </Button>
          <Button
            className={classNames("__wab_instance", sty.button__aqr6C)}
            color={"navLink"}
            flat={true}
            submitsForm={true}
          >
            {"Media"}
          </Button>
        </p.Stack>
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "logo"],
  logo: ["logo"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  logo: typeof Logo;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFooterSection__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFooterSection__VariantsArgs;
    args?: PlasmicFooterSection__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFooterSection__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFooterSection__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicFooterSection__ArgProps,
          internalVariantPropNames: PlasmicFooterSection__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFooterSection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFooterSection";
  } else {
    func.displayName = `PlasmicFooterSection.${nodeName}`;
  }
  return func;
}

export const PlasmicFooterSection = Object.assign(
  // Top-level PlasmicFooterSection renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    logo: makeNodeComponent("logo"),

    // Metadata about props expected for PlasmicFooterSection
    internalVariantProps: PlasmicFooterSection__VariantProps,
    internalArgProps: PlasmicFooterSection__ArgProps
  }
);

export default PlasmicFooterSection;
/* prettier-ignore-end */
